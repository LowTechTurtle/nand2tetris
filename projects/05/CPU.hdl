// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
        Mux16(a=instruction, b=ALUout, sel=instruction[0], out=ARegisIn);
        Mux16(a=ARegisout, b=inM, sel=instruction[3], out=yALU);

        ARegister(in=ARegisIn, load=instruction[10], out=ARegisout, out[0..14]=addressM, out[15]=false);
        DRegister(in=ALUout, load=instruction[11], out=xALU);

        ALU(x=xALU, y=yALU, zx=instruction[4], nx=instruction[5], zy=instruction[6],
             ny=instruction[7], f=instruction[8], no=instruction[9],
              out=ALUout, out=outM, zr=zr, ng=ng);

        And(a=ng, b=instruction[13], out=j1);
        And(a=zr, b=instruction[14], out=j2);
        Not(in=ng, out=notng);
        Not(in=zr, out=notzr);
        And(a=notng, b=notzr, out=notngAndnotzr);
        And(a=notngAndnotzr, b=instruction[15], out=j3);
        Or(a=j1, b=j2, out=j12);
        Or(a=j12, b=j3, out=j123);
        Not(in=j123, out=incload);
        PC(in=ARegisout, load=j123, inc=incload, reset=reset, out[0..14]=pc[0..14], out[15]=false);
        And(a=instruction[0], b=instruction[12], out=writeM);
}